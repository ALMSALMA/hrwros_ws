// Generated by gencpp from file hrwros_msgs/BoxHeightInformation.msg
// DO NOT EDIT!


#ifndef HRWROS_MSGS_MESSAGE_BOXHEIGHTINFORMATION_H
#define HRWROS_MSGS_MESSAGE_BOXHEIGHTINFORMATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hrwros_msgs
{
template <class ContainerAllocator>
struct BoxHeightInformation_
{
  typedef BoxHeightInformation_<ContainerAllocator> Type;

  BoxHeightInformation_()
    : box_height(0.0)  {
    }
  BoxHeightInformation_(const ContainerAllocator& _alloc)
    : box_height(0.0)  {
  (void)_alloc;
    }



   typedef double _box_height_type;
  _box_height_type box_height;





  typedef boost::shared_ptr< ::hrwros_msgs::BoxHeightInformation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hrwros_msgs::BoxHeightInformation_<ContainerAllocator> const> ConstPtr;

}; // struct BoxHeightInformation_

typedef ::hrwros_msgs::BoxHeightInformation_<std::allocator<void> > BoxHeightInformation;

typedef boost::shared_ptr< ::hrwros_msgs::BoxHeightInformation > BoxHeightInformationPtr;
typedef boost::shared_ptr< ::hrwros_msgs::BoxHeightInformation const> BoxHeightInformationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hrwros_msgs::BoxHeightInformation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hrwros_msgs::BoxHeightInformation_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hrwros_msgs::BoxHeightInformation_<ContainerAllocator1> & lhs, const ::hrwros_msgs::BoxHeightInformation_<ContainerAllocator2> & rhs)
{
  return lhs.box_height == rhs.box_height;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hrwros_msgs::BoxHeightInformation_<ContainerAllocator1> & lhs, const ::hrwros_msgs::BoxHeightInformation_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hrwros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hrwros_msgs::BoxHeightInformation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hrwros_msgs::BoxHeightInformation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hrwros_msgs::BoxHeightInformation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hrwros_msgs::BoxHeightInformation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hrwros_msgs::BoxHeightInformation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hrwros_msgs::BoxHeightInformation_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hrwros_msgs::BoxHeightInformation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "709f751d567a4f5ed90345621271840c";
  }

  static const char* value(const ::hrwros_msgs::BoxHeightInformation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x709f751d567a4f5eULL;
  static const uint64_t static_value2 = 0xd90345621271840cULL;
};

template<class ContainerAllocator>
struct DataType< ::hrwros_msgs::BoxHeightInformation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hrwros_msgs/BoxHeightInformation";
  }

  static const char* value(const ::hrwros_msgs::BoxHeightInformation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hrwros_msgs::BoxHeightInformation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 box_height		# the height of the box.\n"
;
  }

  static const char* value(const ::hrwros_msgs::BoxHeightInformation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hrwros_msgs::BoxHeightInformation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.box_height);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BoxHeightInformation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hrwros_msgs::BoxHeightInformation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hrwros_msgs::BoxHeightInformation_<ContainerAllocator>& v)
  {
    s << indent << "box_height: ";
    Printer<double>::stream(s, indent + "  ", v.box_height);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HRWROS_MSGS_MESSAGE_BOXHEIGHTINFORMATION_H
